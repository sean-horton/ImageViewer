/*
 * This file is generated by jOOQ.
 */
package com.onebytellc.imageviewer.backend.db.jooq.tables;


import com.onebytellc.imageviewer.backend.db.jooq.DefaultSchema;
import com.onebytellc.imageviewer.backend.db.jooq.Keys;
import com.onebytellc.imageviewer.backend.db.jooq.tables.records.PathRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Path extends TableImpl<PathRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>path</code>
     */
    public static final Path PATH = new Path();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PathRecord> getRecordType() {
        return PathRecord.class;
    }

    /**
     * The column <code>path.id</code>.
     */
    public final TableField<PathRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>path.collection_id</code>.
     */
    public final TableField<PathRecord, Integer> COLLECTION_ID = createField(DSL.name("collection_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>path.directory</code>.
     */
    public final TableField<PathRecord, String> DIRECTORY = createField(DSL.name("directory"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>path.depth</code>.
     */
    public final TableField<PathRecord, Integer> DEPTH = createField(DSL.name("depth"), SQLDataType.INTEGER, this, "");

    private Path(Name alias, Table<PathRecord> aliased) {
        this(alias, aliased, null);
    }

    private Path(Name alias, Table<PathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>path</code> table reference
     */
    public Path(String alias) {
        this(DSL.name(alias), PATH);
    }

    /**
     * Create an aliased <code>path</code> table reference
     */
    public Path(Name alias) {
        this(alias, PATH);
    }

    /**
     * Create a <code>path</code> table reference
     */
    public Path() {
        this(DSL.name("path"), null);
    }

    public <O extends Record> Path(Table<O> child, ForeignKey<O, PathRecord> key) {
        super(child, key, PATH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PathRecord> getPrimaryKey() {
        return Keys.PATH__PK_PATH;
    }

    @Override
    public List<ForeignKey<PathRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATH__FK_PATH_PK_COLLECTION);
    }

    private transient Collection _collection;

    /**
     * Get the implicit join path to the <code>collection</code> table.
     */
    public Collection collection() {
        if (_collection == null)
            _collection = new Collection(this, Keys.PATH__FK_PATH_PK_COLLECTION);

        return _collection;
    }

    @Override
    public Path as(String alias) {
        return new Path(DSL.name(alias), this);
    }

    @Override
    public Path as(Name alias) {
        return new Path(alias, this);
    }

    @Override
    public Path as(Table<?> alias) {
        return new Path(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Path rename(String name) {
        return new Path(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Path rename(Name name) {
        return new Path(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Path rename(Table<?> name) {
        return new Path(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
