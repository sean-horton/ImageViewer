/*
 * This file is generated by jOOQ.
 */
package com.onebytellc.imageviewer.backend.db.jooq.tables.daos;


import com.onebytellc.imageviewer.backend.db.jooq.tables.Image;
import com.onebytellc.imageviewer.backend.db.jooq.tables.records.ImageRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageDao extends DAOImpl<ImageRecord, com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image, Integer> {

    /**
     * Create a new ImageDao without any configuration
     */
    public ImageDao() {
        super(Image.IMAGE, com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image.class);
    }

    /**
     * Create a new ImageDao with an attached configuration
     */
    public ImageDao(Configuration configuration) {
        super(Image.IMAGE, com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image.class, configuration);
    }

    @Override
    public Integer getId(com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Image.IMAGE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchById(Integer... values) {
        return fetch(Image.IMAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image fetchOneById(Integer value) {
        return fetchOne(Image.IMAGE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchOptionalById(Integer value) {
        return fetchOptional(Image.IMAGE.ID, value);
    }

    /**
     * Fetch records that have <code>path_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchRangeOfPathId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Image.IMAGE.PATH_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path_id IN (values)</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchByPathId(Integer... values) {
        return fetch(Image.IMAGE.PATH_ID, values);
    }

    /**
     * Fetch records that have <code>im_original_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchRangeOfImOriginalDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Image.IMAGE.IM_ORIGINAL_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>im_original_date IN (values)</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchByImOriginalDate(LocalDateTime... values) {
        return fetch(Image.IMAGE.IM_ORIGINAL_DATE, values);
    }

    /**
     * Fetch records that have <code>fs_modify_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchRangeOfFsModifyTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Image.IMAGE.FS_MODIFY_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fs_modify_time IN (values)</code>
     */
    public List<com.onebytellc.imageviewer.backend.db.jooq.tables.pojos.Image> fetchByFsModifyTime(LocalDateTime... values) {
        return fetch(Image.IMAGE.FS_MODIFY_TIME, values);
    }
}
