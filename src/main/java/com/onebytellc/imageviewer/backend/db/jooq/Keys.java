/*
 * This file is generated by jOOQ.
 */
package com.onebytellc.imageviewer.backend.db.jooq;


import com.onebytellc.imageviewer.backend.db.jooq.tables.Collection;
import com.onebytellc.imageviewer.backend.db.jooq.tables.Image;
import com.onebytellc.imageviewer.backend.db.jooq.tables.Path;
import com.onebytellc.imageviewer.backend.db.jooq.tables.records.CollectionRecord;
import com.onebytellc.imageviewer.backend.db.jooq.tables.records.ImageRecord;
import com.onebytellc.imageviewer.backend.db.jooq.tables.records.PathRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CollectionRecord> COLLECTION__PK_COLLECTION = Internal.createUniqueKey(Collection.COLLECTION, DSL.name("pk_collection"), new TableField[] { Collection.COLLECTION.ID }, true);
    public static final UniqueKey<ImageRecord> IMAGE__PK_IMAGE = Internal.createUniqueKey(Image.IMAGE, DSL.name("pk_image"), new TableField[] { Image.IMAGE.ID }, true);
    public static final UniqueKey<PathRecord> PATH__PK_PATH = Internal.createUniqueKey(Path.PATH, DSL.name("pk_path"), new TableField[] { Path.PATH.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ImageRecord, PathRecord> IMAGE__FK_IMAGE_PK_PATH = Internal.createForeignKey(Image.IMAGE, DSL.name("fk_image_pk_path"), new TableField[] { Image.IMAGE.PATH_ID }, Keys.PATH__PK_PATH, new TableField[] { Path.PATH.ID }, true);
    public static final ForeignKey<PathRecord, CollectionRecord> PATH__FK_PATH_PK_COLLECTION = Internal.createForeignKey(Path.PATH, DSL.name("fk_path_pk_collection"), new TableField[] { Path.PATH.COLLECTION_ID }, Keys.COLLECTION__PK_COLLECTION, new TableField[] { Collection.COLLECTION.ID }, true);
}
