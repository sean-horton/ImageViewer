/*
 * This file is generated by jOOQ.
 */
package com.onebyte_llc.imageviewer.backend.db.jooq.tables;


import com.onebyte_llc.imageviewer.backend.db.jooq.DefaultSchema;
import com.onebyte_llc.imageviewer.backend.db.jooq.Indexes;
import com.onebyte_llc.imageviewer.backend.db.jooq.Keys;
import com.onebyte_llc.imageviewer.backend.db.jooq.tables.records.CollectionPathRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollectionPath extends TableImpl<CollectionPathRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>collection_path</code>
     */
    public static final CollectionPath COLLECTION_PATH = new CollectionPath();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectionPathRecord> getRecordType() {
        return CollectionPathRecord.class;
    }

    /**
     * The column <code>collection_path.id</code>.
     */
    public final TableField<CollectionPathRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>collection_path.collection_id</code>.
     */
    public final TableField<CollectionPathRecord, Integer> COLLECTION_ID = createField(DSL.name("collection_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>collection_path.directory</code>.
     */
    public final TableField<CollectionPathRecord, String> DIRECTORY = createField(DSL.name("directory"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>collection_path.depth</code>.
     */
    public final TableField<CollectionPathRecord, Integer> DEPTH = createField(DSL.name("depth"), SQLDataType.INTEGER, this, "");

    private CollectionPath(Name alias, Table<CollectionPathRecord> aliased) {
        this(alias, aliased, null);
    }

    private CollectionPath(Name alias, Table<CollectionPathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>collection_path</code> table reference
     */
    public CollectionPath(String alias) {
        this(DSL.name(alias), COLLECTION_PATH);
    }

    /**
     * Create an aliased <code>collection_path</code> table reference
     */
    public CollectionPath(Name alias) {
        this(alias, COLLECTION_PATH);
    }

    /**
     * Create a <code>collection_path</code> table reference
     */
    public CollectionPath() {
        this(DSL.name("collection_path"), null);
    }

    public <O extends Record> CollectionPath(Table<O> child, ForeignKey<O, CollectionPathRecord> key) {
        super(child, key, COLLECTION_PATH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COLLECTION_PATH_COLLECTION_ID_INDEX);
    }

    @Override
    public UniqueKey<CollectionPathRecord> getPrimaryKey() {
        return Keys.COLLECTION_PATH__PK_COLLECTION_PATH;
    }

    @Override
    public List<ForeignKey<CollectionPathRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COLLECTION_PATH__FK_COLLECTION_ID);
    }

    private transient Collection _collection;

    /**
     * Get the implicit join path to the <code>collection</code> table.
     */
    public Collection collection() {
        if (_collection == null)
            _collection = new Collection(this, Keys.COLLECTION_PATH__FK_COLLECTION_ID);

        return _collection;
    }

    @Override
    public CollectionPath as(String alias) {
        return new CollectionPath(DSL.name(alias), this);
    }

    @Override
    public CollectionPath as(Name alias) {
        return new CollectionPath(alias, this);
    }

    @Override
    public CollectionPath as(Table<?> alias) {
        return new CollectionPath(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionPath rename(String name) {
        return new CollectionPath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionPath rename(Name name) {
        return new CollectionPath(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionPath rename(Table<?> name) {
        return new CollectionPath(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
